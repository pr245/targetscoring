#################################################
### Paper Target Scoring System Software
### P.Rai Third Year Project
#################################################
####Importing Python Libraries

import tkFileDialog
import cv2
import numpy as np #import numpy lib and define#

from Tkinter import *
from PIL import Image
from PIL import ImageTk
from math import hypot # import math function
from itertools import repeat
from tkColorChooser import askcolor
from skimage.feature import peak_local_max
from skimage.morphology import watershed
from scipy import ndimage
import tkMessageBox

root = Tk()



counter_list = []
new_list009 = []
K = []
L = []
P = []
Selected = []

def colorcode():
  tkMessageBox.showinfo("Detecting Bulletholes", "Pick Lower Colour Threshold of Bullethole Background")
  color = askcolor()
  return color[0]

def colorcode2():
  tkMessageBox.showinfo("Detecting Bulletholes", "Pick Upper Colour Threshold of Bullethole Background")
  color = askcolor()
  return color[0]



def distance(p1, p2):
"""Euclidean distance between two points."""
x1, y1 = p1
x2, y2 = p2
return hypot(x2 - x1, y2 - y1)

def imageFrame(img):

   global panelC

   if panelC is None:
       # the first panel will store our original image
       panelC = Label(image=img)
       panelC.image = img
       panelC.grid(row=1, column=3)
   else:
       # update the pannels
       panelC.configure(image=img)
       panelC.image = img

def imageFrame2(img):

   global panelB

   if panelB is None:

       panelB = Label(image=img)
       panelB.image = img
       panelB.grid(row=1, column=4)

   else:

       panelB.configure(image=img)
       panelB.image = img



def display():



   del counter_list[:]
   del K[:]
   del L[:]
   del P[:]

   imageFrame2("")


   path = tkFileDialog.askopenfilename()
   image0 = cv2.imread(path)

   Selected.append(path)

   image00 = cv2.cvtColor(image0, cv2.COLOR_BGR2RGB)

   image2 = Image.fromarray(image00)

   image5 = ImageTk.PhotoImage(image2)

   label4 = Label(root, text="Loaded Target Image")
   label4.grid(row=0, column=3)

   imageFrame(image5)




def rotate_image():

   path2 = str(Selected[-1])
   img = cv2.imread(path2, 1)
   rows, cols, _ = img.shape

   M = cv2.getRotationMatrix2D((cols / 2, rows / 2), 90, 1)
   dst = cv2.warpAffine(img, M, (cols, rows))
   img3 = cv2.imwrite(path2, dst)



def select_image():

  # grab a reference to the image panels
  global panelB
  # open a file chooser dialog and allow the user to select an input
  # image
  #path2 = str(Selected[-1])
  if len(Selected) is 0:
      tkMessageBox.showinfo("Error", "Please select target image first!")
  else:
       path2 = str(Selected[-1])

  # ensure a file path was selected
  if len(path2) > 0:
      # load the image from disk, convert it to grayscale, and detect
      # edges in it



      image = cv2.imread(path2)

      shifted = cv2.pyrMeanShiftFiltering(image, 10, 21)
      gray = cv2.cvtColor(shifted, cv2.COLOR_BGR2GRAY)

      # OpenCV represents images in BGR order; however PIL represents
      # images in RGB order, so we need to swap the channels
      #image2 = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

      image1 = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

      lower_bound = np.array(colorcode())
      upper_bound = np.array(colorcode2())

      mask12 = cv2.inRange(image1, lower_bound, upper_bound)

      kernel = np.ones((5, 5), np.uint8)
      mask1 = cv2.morphologyEx(mask12, cv2.MORPH_OPEN, kernel)

      cv2.imshow('Objects Detected', mask1)
      cv2.waitKey(0)

      _, contours, _ = cv2.findContours(mask1.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

      im_in = cv2.imread(path2, cv2.IMREAD_GRAYSCALE);

      # Threshold.
      # Set values equal to or above 220 to 0.
      # Set values below 220 to 255.

      th, im_th = cv2.threshold(im_in, 120, 255, cv2.THRESH_BINARY_INV);

      cv2.imshow('Objects Detected', im_th)
      cv2.waitKey(0)

      # Copy the thresholded image.
      im_floodfill = im_th.copy()

      # Mask used to flood filling.
      # Notice the size needs to be 2 pixels than the image.
      h, w = im_th.shape[:2]
      mask = np.zeros((h + 2, w + 2), np.uint8)

      # Floodfill from point (0, 0)
      cv2.floodFill(im_floodfill, mask, (0, 0), 255);

      # Invert floodfilled image
      im_floodfill_inv = cv2.bitwise_not(im_floodfill)

      # Combine the two images to get the foreground.
      im_out = im_th | im_floodfill_inv

      kernel = np.ones((9, 9), np.uint8)
      opening = cv2.morphologyEx(im_out, cv2.MORPH_OPEN, kernel)

      cv2.imshow('Objects Detected', opening)
      cv2.waitKey(0)



      D = ndimage.distance_transform_edt(mask1)
      localMax = peak_local_max(D, indices=False, min_distance=1, labels=mask1)

      # perform a connected component analysis on the local peaks,
      # using 8-connectivity, then appy the Watershed algorithm
      markers = ndimage.label(localMax, structure=np.ones((3, 3)))[0]
      labels = watershed(-D, markers, mask=mask1)
      print(" {} Bullet Holes Found".format(len(np.unique(labels)) - 1))
      label5 = Label(root, text="Scored Target \n {} Bullet Holes Detected".format(len(np.unique(labels)) - 1))
      label5.grid(row=0, column=4)

      # loop over the unique labels returned by the Watershed
      # algorithm
      for label in np.unique(labels):
          # if the label is zero, we are examining the 'background'
          # so simply ignore it
          if label == 0:
              continue

          # otherwise, allocate memory for the label region and draw
          # it on the mask
          mask = np.zeros(gray.shape, dtype="uint8")
          mask[labels == label] = 255

          # detect contours in the mask and grab the largest one
          cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
          c = max(cnts, key=cv2.contourArea)

          # draw a circle enclosing the object
          ((x, y), r) = cv2.minEnclosingCircle(c)
          cv2.circle(image1, (int(x), int(y)), int(r), (0, 255, 0), 2)
          cv2.putText(image1, "#{}".format(label), (int(x) + 5, int(y)),
                      cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
          center = (float(x), float(y))
          radius = float(r)
          L.append(center)
          #for i in range(len(L)):
               # print(L[i])

          K = []
          K.append(radius)

          # for i in range(len(K)):
          # print(K[i])

      _, contours1, _ = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

      for contour2 in contours1:

          if len(contours1) > 0:
              # find largest contour in mask, use to compute minEnCircle
              c = max(contours1, key=cv2.contourArea)
              (x, y), radius222 = cv2.minEnclosingCircle(c)
              center22 = (float(x), float(y))
              radius22 = float(radius222)
              L.append(center22)
              pxtocm = 5.9 / (float(radius22))
              print ("borderspace")
              print(pxtocm)

      edistance = [distance(*pair) for pair in zip(repeat(L[int((len(np.unique(labels)) - 1))]), L[0:int((len(np.unique(labels)) - 1))])]
      P.append(edistance)
      # print ("performing e distance ")
      # for i in range(len(edistance)):
      # print(edistance[i])
      newList1 = [x for x in edistance]
      # print ("resort edistance to list ")
      # print(newList1)

      newlist2 = [x * pxtocm for x in newList1]
      # print ("conver to cm ")
      # print(newlist2)
      newList3 = [x / 2 for x in newlist2]
      # print ("half ")
      # print(newList3)
      newList4 = [x / 0.79 for x in newList3]
      # print ("dividing by border distance ")
      # print(newList4)
      newList5 = [11 - x for x in newList4]
      # print ("subtacting the no of scoring rings ")
      # print(newList5)
      # print ("if a answer is negative, set it to 0 ")
      list6 = [0 if i < 0 else i for i in newList5]
      # print(list6)
      newList55 = [x + 0 for x in list6]
      #print ("subtacting the no of scoring rings ")
      print(newList55)
      print ("Final score(s)")
      new_list111 = map(int, newList55)
      print(new_list111)
      #label1.configure(text="\n".join(map(str, new_list111)))
      for x in range(len(new_list111)):
          print(new_list111[x])

      counter_list = list(enumerate(new_list111, 1))
      #print(counter_list)
      SumB = sum(new_list111)
      label1.configure(text="(Shot No, Score)" + "\n" + "\n".join(map(str, counter_list)) + "\n" + "Total Score: " + str(SumB))
      #for a, b in enumerate(new_list111, 1):
          #print 'Shot No {}: {} Points'.format(a, b)
      #var = StringVar()
      #var.set(printTest(new_list111))
      #label1.configure(text = printTest(new_list111))

      print("Total Score:", sum(new_list111))

      label6 = Label(root, text="WIP")
      label6.grid(row=0, column=0)

      del counter_list[:]
      del K[:]
      del L[:]
      del P[:]





      # convert the images to PIL format...
      #image2 = Image.fromarray(image2)
      image11 = Image.fromarray(image1)

      # ...and then to ImageTk format
      #image2 = ImageTk.PhotoImage(image2)
      image44 = ImageTk.PhotoImage(image11)

      imageFrame2(image44)

# initialize the window toolkit along with the two image panels


panelB = None
panelC = None
panelD = None




          # create a button, then when pressed, will trigger a file chooser
          # dialog and allow the user to select an input image; then add the
          # button the GUI
btn = Button(root, text=" Select Target Image ", command=display)
btn.grid(row=5, column=0)

btn2 = Button(root, text="       Score Target       ", command=select_image)
btn2.grid(row=6, column=0)

btn2 = Button(root, text="Rotate Image 90 Deg", command=rotate_image)
btn2.grid(row=7, column=0)

label1 = Label(root)
label1.grid(row=1, column=0)


root.title("Paper Target Scoring")
# kick off the GUI
root.iconbitmap('bullseye-target-center-shooting-aim-goal-shoot-ico.ico')
root.mainloop()

